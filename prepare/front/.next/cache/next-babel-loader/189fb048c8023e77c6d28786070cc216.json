{"ast":null,"code":"var _jsxFileName = \"/Users/beomso0/Desktop/godev/birdSns/prepare/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { END } from 'redux-saga';\nimport axios from 'axios';\nimport AppLayout from '../components/AppLayout';\nimport PostCard from '../components/PostCard';\nimport PostFrom from '../components/PostForm';\nimport { LOAD_POST_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    // infinite scroll 구현\n    function onScroll() {\n      // console.log(\n      //   window.scrollY,\n      //   document.documentElement.clientHeight,\n      //   document.documentElement.scrollHeight,\n      // );\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POST_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    }; // return을 안해주면 메모리에 계속 상주해서 성능 저하될 수 있으니 주의\n  }, [hasMorePost, loadPostLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, me && __jsx(PostFrom, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 14\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  // getStaticProps는 정적인 게시글을 다룰 때 사용함.\n  // 미리 html로 만들어놓는 기능.\n  // StaticProps를 만들어놓으면 미리 만들어놓은 렌더링 결과물을 뿌려주니까 서버에 무리가 덜 감.\n  // but SP는 블로그 게시물, 뉴스 정도를 빼면 사용하기가 어려움.\n  // 특히, 개인화 페이지는 html로 만들기가 매우 어려움.\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    // 이런 조건을 붙여줘야 로그인이 공유되는 문제가 생기지 않음.\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/pages/index.js"],"names":["useDispatch","useSelector","React","useEffect","END","axios","AppLayout","PostCard","PostFrom","LOAD_POST_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Home","me","state","user","mainPosts","hasMorePost","loadPostLoading","retweetError","post","dispatch","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\nimport React, { useEffect } from 'react';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostCard from '../components/PostCard';\r\nimport PostFrom from '../components/PostForm';\r\nimport { LOAD_POST_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nconst Home = () => {\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostLoading, retweetError } = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n      alert(retweetError);\r\n    }\r\n  }, [retweetError]);\r\n\r\n  useEffect(() => { // infinite scroll 구현\r\n    function onScroll() {\r\n      // console.log(\r\n      //   window.scrollY,\r\n      //   document.documentElement.clientHeight,\r\n      //   document.documentElement.scrollHeight,\r\n      // );\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePost && !loadPostLoading) {\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n          dispatch({\r\n            type: LOAD_POST_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    }; // return을 안해주면 메모리에 계속 상주해서 성능 저하될 수 있으니 주의\r\n  }, [hasMorePost, loadPostLoading, mainPosts]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostFrom />}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  // getStaticProps는 정적인 게시글을 다룰 때 사용함.\r\n  // 미리 html로 만들어놓는 기능.\r\n  // StaticProps를 만들어놓으면 미리 만들어놓은 렌더링 결과물을 뿌려주니까 서버에 무리가 덜 감.\r\n  // but SP는 블로그 게시물, 뉴스 정도를 빼면 사용하기가 어려움.\r\n  // 특히, 개인화 페이지는 html로 만들기가 매우 어려움.\r\n\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) { // 이런 조건을 붙여줘야 로그인이 공유되는 문제가 생기지 않음.\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}