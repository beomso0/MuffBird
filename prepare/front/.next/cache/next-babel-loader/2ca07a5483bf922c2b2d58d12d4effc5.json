{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/beomso0/Desktop/godev/birdSns/prepare/front/components/PostForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Form, Input, Button } from 'antd';\nimport React, { useCallback, useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { addPost } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var imageInput = useRef();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    dispatch(addPost(text));\n  }, [text]);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log('images', e.target.files);\n    var imageFormData = new FormData(); // formdata로 해야 멀티파트 형식으로 전송 가능.\n\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f); // 여기서 key 값 (image)을 정확히 해줘야 백엔드의 upload 객체가 인식함.\n    });\n  }, []);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, \" \", __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"how was your day?\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), \" \", __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": 'right'\n    },\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, imagePaths.map(function (v) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, __jsx(\"img\", {\n      src: v,\n      style: {\n        width: '200px'\n      },\n      alt: v,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\n_s(PostForm, \"8f2pvwUvEXH6RQOKIvPixwkMO00=\", false, function () {\n  return [useDispatch, useSelector, useInput];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/components/PostForm.js"],"names":["Form","Input","Button","React","useCallback","useRef","useEffect","useDispatch","useSelector","useInput","addPost","PostForm","imageInput","dispatch","state","post","imagePaths","addPostDone","text","onChangeText","setText","onSubmit","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","FormData","forEach","call","f","append","margin","map","v","display","width"],"mappings":"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","sourcesContent":["import { Form, Input, Button } from 'antd';\r\nimport React, { useCallback, useRef, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useInput from '../hooks/useInput';\r\nimport { addPost } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const imageInput = useRef();\r\n  const dispatch = useDispatch();\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const [text, onChangeText, setText] = useInput('');\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setText('');\r\n    }\r\n  }, [addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    dispatch(addPost(text));\r\n  }, [text]);\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log('images', e.target.files);\r\n    const imageFormData = new FormData(); // formdata로 해야 멀티파트 형식으로 전송 가능.\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f); // 여기서 key 값 (image)을 정확히 해줘야 백엔드의 upload 객체가 인식함.\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}> {/* multipart가 이미지/비디오 올리는 방식 */}\r\n      <Input.TextArea\r\n        value={text}\r\n        onChange={onChangeText}\r\n        maxLength={140}\r\n        placeholder=\"how was your day?\"\r\n      />\r\n      <div>\r\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} /> {/* name=\"image\"로 설정하면 route/post의 multer 객체(upload)로 바로 감 */}\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">짹짹</Button>\r\n      </div>\r\n      <div>\r\n        { imagePaths.map((v) => (\r\n          <div key={v} style={{ display: 'inline-block' }}>\r\n            <img src={v} style={{ width: '200px' }} alt={v} />\r\n            <div>\r\n              <Button>제거</Button>\r\n            </div>\r\n          </div>\r\n        )) }\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}