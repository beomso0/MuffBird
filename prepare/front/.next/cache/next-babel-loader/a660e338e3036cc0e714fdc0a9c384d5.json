{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; // reducer 만들어 준거랑 비슷하게 rootSaga도 만들어줌.\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false // 이 조건문이 true면 ? 값으로 변수 지정, false면 : 값으로 지정.\n  ? compose(applyMiddleware.apply(void 0, middlewares)) // 배포용일 때는 devtool에 연결 x\n  : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); // 개발모드에서는 devtool에 연결.\n\n  var store = createStore(reducer, enhancer); // store는 state랑 reducer를 포함\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper; // ==> 이제 _app.js 가서 Nodebirde를 wrapper로 감싸줌","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAAiC;;AAEjC,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,MAAMK,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GAAG,MAAsC;AAAtC,IACbR,OAAO,CAACD,eAAe,MAAf,SAAmBQ,WAAnB,CAAD,CADM,CAC4B;AAD5B,IAEbN,mBAAmB,CAACF,eAAe,MAAf,SAAmBQ,WAAnB,CAAD,CAFvB,CAH2B,CAK+B;;AAC1D,MAAME,KAAK,GAAGX,WAAW,CAACK,OAAD,EAAUK,QAAV,CAAzB,CAN2B,CAMmB;;AAC9CC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACD,CATD;;AAWA,IAAMG,OAAO,GAAGf,aAAa,CAACQ,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf,C,CAAwB","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas'; // reducer 만들어 준거랑 비슷하게 rootSaga도 만들어줌.\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer = process.env.NODE_ENV === 'production' // 이 조건문이 true면 ? 값으로 변수 지정, false면 : 값으로 지정.\r\n    ? compose(applyMiddleware(...middlewares)) // 배포용일 때는 devtool에 연결 x\r\n    : composeWithDevTools(applyMiddleware(...middlewares)); // 개발모드에서는 devtool에 연결.\r\n  const store = createStore(reducer, enhancer); // store는 state랑 reducer를 포함\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\r\n\r\nexport default wrapper; // ==> 이제 _app.js 가서 Nodebirde를 wrapper로 감싸줌\r\n"]},"metadata":{},"sourceType":"module"}