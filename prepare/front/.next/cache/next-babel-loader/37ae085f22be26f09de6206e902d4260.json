{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(userSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(logOut);\n\nimport { all, fork } from \"redux-saga/effects\";\nimport axios from 'axios';\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS' // data: result.data,\n\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: 'LOG_IN_FAILURE' // data: err.response.data,\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS' // data: result.data,\n\n          });\n\n        case 5:\n          _context5.next = 11;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 11;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: 'LOG_OUT_FAILURE' // data: err.response.data,\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/user.js"],"names":["userSaga","watchLogIn","watchLogOut","logIn","logOut","all","fork","axios","takeLatest","logInAPI","data","post","action","delay","put","type","logOutAPI"],"mappings":";;oDAGyBA,Q;qDAOfC,U;qDAIAC,W;qDAQAC,K;qDAoBAC,M;;AA1CV,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAAUP,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMK,GAAG,CAAC,CACNC,IAAI,CAACL,UAAD,CADE,EAENK,IAAI,CAACJ,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOf,SAAUD,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAAC,gBAAD,EAAmBL,KAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAEE;;;AAEF,SAAUD,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,iBAAD,EAAoBJ,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASK,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOH,KAAK,CAACI,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,SAAUP,KAAV,CAAgBS,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMC,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAE,gBADA,CAEN;;AAFM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMD,GAAG,CAAC;AAAE;AACRC,YAAAA,IAAI,EAAE,gBADA,CAEN;;AAFM,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASC,SAAT,GAAqB;AACjB,SAAOT,KAAK,CAACI,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAAUP,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMS,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMD,GAAG,CAAC;AAAE;AACRC,YAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork } from \"redux-saga/effects\";\nimport axios from 'axios';\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n    ])\n}\n\nfunction* watchLogIn() {\n    yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut); //takeLeading은 첫번째꺼\n}\n\nfunction logInAPI(data) {\n    return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n    try{\n        // const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            // data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_IN_FAILURE',\n            // data: err.response.data,\n        });\n    }    \n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n    try{\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            // data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_OUT_FAILURE',\n            // data: err.response.data,\n        });\n    }    \n}"]},"metadata":{},"sourceType":"module"}