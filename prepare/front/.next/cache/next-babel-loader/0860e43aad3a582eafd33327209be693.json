{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, CHANGE_NICKNAME_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, REMOVE_FOLLOWER_FAILURE } from '../reducers/user';\nexport const loginRequestAction = data => {\n  return {\n    type: 'LOG_IN_REQUEST',\n    data\n  };\n}; // logout action\n\nexport const logoutRequestAction = () => {\n  return {\n    type: 'LOG_OUT_REQUEST'\n  };\n};\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  // signup api는 generator가 아님에 주의.\n  return axios.post('/user', data); // 데이터가 routes/user.js에서 req.body에 해당함.\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  // signup api는 generator가 아님에 주의.\n  return axios.patch(`/user/${data}/follow`);\n}\n\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  // signup api는 generator가 아님에 주의.\n  return axios.delete(`/user/${data}/unfollow`);\n}\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadMyInfo() {\n  try {\n    const result = yield call(loadMyInfoAPI);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction changeNicknameAPI(data) {\n  return axios.patch('/user/nickname', {\n    nickname: data\n  });\n}\n\nfunction* changeNickname(action) {\n  try {\n    const result = yield call(changeNicknameAPI, action.data);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: CHANGE_NICKNAME_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction loadFollowersAPI() {\n  return axios.get('/user/followers');\n}\n\nfunction* loadFollowers() {\n  try {\n    const result = yield call(loadFollowersAPI);\n    yield put({\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_FOLLOWERS_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction loadFollowingsAPI() {\n  return axios.get('/user/followings');\n}\n\nfunction* loadFollowings() {\n  try {\n    const result = yield call(loadFollowingsAPI);\n    yield put({\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_FOLLOWINGS_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction removeFollowerAPI(data) {\n  return axios.delete('/user/followers', data);\n}\n\nfunction* removeFollower(action) {\n  try {\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: REMOVE_FOLLOWER_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo); // takeLeading은 첫번째꺼\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow); // takeLeading은 첫번째꺼\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow); // takeLeading은 첫번째꺼\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); // LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} // take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut); // takeLeading은 첫번째꺼\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); // takeLeading은 첫번째꺼\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchloadFollowers() {\n  yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction* watchloadFollowings() {\n  yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction* watchremoveFollower() {\n  yield takeLatest(REMOVE_FOLLOWER_REQUEST, loadFollowings);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchremoveFollower), fork(watchloadFollowers), fork(watchloadFollowings), fork(watchChangeNickname), fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","delay","put","call","axios","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","loginRequestAction","data","type","logoutRequestAction","logInAPI","post","logIn","action","result","err","error","response","logOutAPI","logOut","signUpAPI","signUp","console","log","followAPI","patch","follow","unfollowAPI","delete","unfollow","loadMyInfoAPI","get","loadMyInfo","changeNicknameAPI","nickname","changeNickname","loadFollowersAPI","loadFollowers","loadFollowingsAPI","loadFollowings","removeFollowerAPI","removeFollower","watchLoadMyInfo","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","watchChangeNickname","watchloadFollowers","watchloadFollowings","watchremoveFollower","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE,\n  UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE,\n  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n  LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAILURE,\n  CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, CHANGE_NICKNAME_FAILURE,\n  LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE,\n  LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_FOLLOWINGS_FAILURE,\n  REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, REMOVE_FOLLOWER_FAILURE,\n} from '../reducers/user';\n\nexport const loginRequestAction = (data) => {\n  return {\n    type: 'LOG_IN_REQUEST',\n    data,\n  };\n};\n\n// logout action\nexport const logoutRequestAction = () => {\n  return {\n    type: 'LOG_OUT_REQUEST',\n  };\n};\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction signUpAPI(data) { // signup api는 generator가 아님에 주의.\n  return axios.post('/user', data); // 데이터가 routes/user.js에서 req.body에 해당함.\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction followAPI(data) { // signup api는 generator가 아님에 주의.\n  return axios.patch(`/user/${data}/follow`);\n}\n\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: FOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unfollowAPI(data) { // signup api는 generator가 아님에 주의.\n  return axios.delete(`/user/${data}/unfollow`);\n}\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadMyInfo() {\n  try {\n    const result = yield call(loadMyInfoAPI);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction changeNicknameAPI(data) {\n  return axios.patch('/user/nickname', { nickname: data });\n}\n\nfunction* changeNickname(action) {\n  try {\n    const result = yield call(changeNicknameAPI, action.data);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: CHANGE_NICKNAME_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction loadFollowersAPI() {\n  return axios.get('/user/followers');\n}\n\nfunction* loadFollowers() {\n  try {\n    const result = yield call(loadFollowersAPI);\n    yield put({\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_FOLLOWERS_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction loadFollowingsAPI() {\n  return axios.get('/user/followings');\n}\n\nfunction* loadFollowings() {\n  try {\n    const result = yield call(loadFollowingsAPI);\n    yield put({\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_FOLLOWINGS_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction removeFollowerAPI(data) {\n  return axios.delete('/user/followers', data);\n}\n\nfunction* removeFollower(action) {\n  try {\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: REMOVE_FOLLOWER_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo); // takeLeading은 첫번째꺼\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow); // takeLeading은 첫번째꺼\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow); // takeLeading은 첫번째꺼\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); // LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} // take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut); // takeLeading은 첫번째꺼\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); // takeLeading은 첫번째꺼\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchloadFollowers() {\n  yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction* watchloadFollowings() {\n  yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction* watchremoveFollower() {\n  yield takeLatest(REMOVE_FOLLOWER_REQUEST, loadFollowings);\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchremoveFollower),\n    fork(watchloadFollowers),\n    fork(watchloadFollowings),\n    fork(watchChangeNickname),\n    fork(watchLoadMyInfo),\n    fork(watchFollow),\n    fork(watchUnfollow),\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}