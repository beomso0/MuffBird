{"ast":null,"code":"// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\nimport { all, fork, call, take, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* logIn() {\n  try {\n    const result = yield call(logInAPI);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI() {\n  return axios.post('/api/post');\n}\n\nfunction* addPost() {\n  try {\n    const result = yield call(addPostAPI);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n} //call은 동기 함수라서 결과 올떄까지 기다림 <-> fork는 비동기 함수 요청이라서, 결과 기다리지 않고 바로 다음줄 실행.\n// yield는 await이랑 비슷한 역할이라고 생각해도 됨.\n\n\nfunction* watchLogIn() {\n  yield take('LOG_IN_REQUEST', logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n}\n\nfunction* watchLogOut() {\n  yield take('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), //fork는 함수를 실행하는 것. \n  fork(watchLogOut), //근데 call이랑은 다름. then, how different?\n  fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/index.js"],"names":["all","fork","call","take","put","axios","logInAPI","post","logIn","result","type","data","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAChB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAG;AACC,UAAMC,MAAM,GAAG,MAAMP,IAAI,CAACI,QAAD,CAAzB;AACA,UAAMF,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACV,UAAMR,GAAG,CAAC;AAAE;AACRM,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASG,SAAT,GAAqB;AACjB,SAAOT,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUQ,MAAV,GAAmB;AACf,MAAG;AACC,UAAMN,MAAM,GAAG,MAAMP,IAAI,CAACY,SAAD,CAAzB;AACA,UAAMV,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACV,UAAMR,GAAG,CAAC;AAAE;AACRM,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASK,UAAT,GAAsB;AAClB,SAAOX,KAAK,CAACE,IAAN,CAAW,WAAX,CAAP;AACH;;AAED,UAAUU,OAAV,GAAoB;AAChB,MAAG;AACC,UAAMR,MAAM,GAAG,MAAMP,IAAI,CAACc,UAAD,CAAzB;AACA,UAAMZ,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAE,kBADA;AAENC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACV,UAAMR,GAAG,CAAC;AAAE;AACRM,MAAAA,IAAI,EAAE,kBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAED;AACA;;;AAEA,UAAUO,UAAV,GAAuB;AACnB,QAAMf,IAAI,CAAC,gBAAD,EAAmBK,KAAnB,CAAV,CADmB,CACkB;AACxC;;AAED,UAAUW,WAAV,GAAwB;AACpB,QAAMhB,IAAI,CAAC,iBAAD,EAAoBY,MAApB,CAAV;AACH;;AAED,UAAUK,YAAV,GAAyB;AACrB,QAAMjB,IAAI,CAAC,kBAAD,EAAqBc,OAArB,CAAV;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMrB,GAAG,CAAC,CACNC,IAAI,CAACiB,UAAD,CADE,EACY;AAClBjB,EAAAA,IAAI,CAACkB,WAAD,CAFE,EAEa;AACnBlB,EAAAA,IAAI,CAACmB,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\n\nimport { all, fork, call, take, put } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI() {\n    return axios.post('/api/login');\n}\n\nfunction* logIn() {\n    try{\n        const result = yield call(logInAPI);\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data,\n        });\n    }    \n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n    try{\n        const result = yield call(logOutAPI);\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data,\n        });\n    }    \n}\n\nfunction addPostAPI() {\n    return axios.post('/api/post');\n}\n\nfunction* addPost() {\n    try{\n        const result = yield call(addPostAPI);\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'ADD_POST_FAILURE',\n            data: err.response.data,\n        });\n    }    \n}\n\n//call은 동기 함수라서 결과 올떄까지 기다림 <-> fork는 비동기 함수 요청이라서, 결과 기다리지 않고 바로 다음줄 실행.\n// yield는 await이랑 비슷한 역할이라고 생각해도 됨.\n\nfunction* watchLogIn() {\n    yield take('LOG_IN_REQUEST', logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n}\n\nfunction* watchLogOut() {\n    yield take('LOG_OUT_REQUEST', logOut);\n}\n\nfunction* watchAddPost() {\n    yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogIn), //fork는 함수를 실행하는 것. \n        fork(watchLogOut), //근데 call이랑은 다름. then, how different?\n        fork(watchAddPost),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}