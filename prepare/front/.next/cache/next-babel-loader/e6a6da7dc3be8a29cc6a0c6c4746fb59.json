{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      retrun(next(action));\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = false // 이 조건문이 true면 ? 값으로 변수 지정, false면 : 값으로 지정.\n  ? compose(applyMiddleware.apply(void 0, middlewares)) //배포용일 때는 devtool에 연결 x\n  : compose(composeWithDevTools.apply(void 0, middlewares)); //개발모드에서는 devtool에 연결.\n\n  var store = createStore(reducer, enhancer); // store는 state랑 reducer를 포함\n\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper; // ==> 이제 _app.js 가서 Nodebirde를 wrapper로 감싸줌","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","composeWithDevTools","createSagaMiddleware","reducer","loggerMiddleware","dispatch","getState","next","action","console","log","retrun","configureStore","sagaMiddleware","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,IAAMC,gBAAgB,GAAI,SAApBA,gBAAoB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SAA4B,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAY;AACxEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAG,MAAAA,MAAM,CAAEJ,IAAI,CAACC,MAAD,CAAN,CAAN;AACH,KAHqD;AAAA,GAA5B;AAAA,CAA1B;;AAKA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,MAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBT,gBAAjB,CAApB;AACA,MAAMW,QAAQ,GAAG,MAAsC;AAAtC,IACXf,OAAO,CAACD,eAAe,MAAf,SAAmBe,WAAnB,CAAD,CADI,CAC8B;AAD9B,IAEXd,OAAO,CAACC,mBAAmB,MAAnB,SAAuBa,WAAvB,CAAD,CAFb,CAHyB,CAK0B;;AACnD,MAAME,KAAK,GAAGlB,WAAW,CAACK,OAAD,EAAUY,QAAV,CAAzB,CANyB,CAMqB;;AAC9C,SAAOC,KAAP;AACH,CARD;;AAUA,IAAMC,OAAO,GAAGpB,aAAa,CAACe,cAAD,EAAiB;AAAEM,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf,C,CAAwB","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\n\r\nconst loggerMiddleware = (({ dispatch, getState }) => (next) => (action) => {\r\n    console.log(action);\r\n    retrun (next(action));\r\n});\r\n\r\nconst configureStore = () => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware, loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production' // 이 조건문이 true면 ? 값으로 변수 지정, false면 : 값으로 지정.\r\n        ? compose(applyMiddleware(...middlewares)) //배포용일 때는 devtool에 연결 x\r\n        : compose(composeWithDevTools(...middlewares)) //개발모드에서는 devtool에 연결.\r\n    const store = createStore(reducer, enhancer); // store는 state랑 reducer를 포함\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development'}); \r\n\r\nexport default wrapper; // ==> 이제 _app.js 가서 Nodebirde를 wrapper로 감싸줌\r\n\r\n"]},"metadata":{},"sourceType":"module"}