{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/beomso0/Desktop/godev/birdSns/prepare/front/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { End } from 'redux-saga';\nimport AppLayout from '../components/AppLayout';\nimport PostCard from '../components/PostCard';\nimport PostFrom from '../components/PostForm';\nimport { LOAD_POST_REQUEST } from '../reducers/post';\n\nvar Home = function Home() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostLoading = _useSelector2.loadPostLoading,\n      retweetError = _useSelector2.retweetError,\n      retweetDone = _useSelector2.retweetDone,\n      addPostDone = _useSelector2.addPostDone;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    // infinite scroll 구현\n    function onScroll() {\n      // console.log(\n      //   window.scrollY,\n      //   document.documentElement.clientHeight,\n      //   document.documentElement.scrollHeight,\n      // );\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POST_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    }; // return을 안해주면 메모리에 계속 상주해서 성능 저하될 수 있으니 주의\n  }, [hasMorePost, loadPostLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, me && __jsx(PostFrom, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 14\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\n_s(Home, \"n/0woZhjoohN9wD8kbirENGYYik=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/pages/index.js"],"names":["useDispatch","useSelector","React","useEffect","End","AppLayout","PostCard","PostFrom","LOAD_POST_REQUEST","Home","state","user","me","post","mainPosts","hasMorePost","loadPostLoading","retweetError","retweetDone","addPostDone","dispatch","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACjB,qBAAeR,WAAW,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA1B;AAAA,MAAQC,EAAR,gBAAQA,EAAR;;AACA,sBAA4FX,WAAW,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CAAvG;AAAA,MAAQC,SAAR,iBAAQA,SAAR;AAAA,MAAmBC,WAAnB,iBAAmBA,WAAnB;AAAA,MAAgCC,eAAhC,iBAAgCA,eAAhC;AAAA,MAAiDC,YAAjD,iBAAiDA,YAAjD;AAAA,MAA+DC,WAA/D,iBAA+DA,WAA/D;AAAA,MAA4EC,WAA5E,iBAA4EA,WAA5E;;AACA,MAAMC,QAAQ,GAAGpB,WAAW,EAA5B;AAEAG,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,YAAJ,EAAkB;AAChBI,MAAAA,KAAK,CAACJ,YAAD,CAAL;AACD;AACF,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT;AAMAd,EAAAA,SAAS,CAAC,YAAM;AAAE;AAChB,aAASmB,QAAT,GAAoB;AAClB;AACA;AACA;AACA;AACA;AACA,UAAIC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACxG,YAAIb,WAAW,IAAI,CAACC,eAApB,EAAqC;AAAA;;AACnC,cAAMa,MAAM,iBAAGf,SAAS,CAACA,SAAS,CAACgB,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD;AACAX,UAAAA,QAAQ,CAAC;AACPY,YAAAA,IAAI,EAAExB,iBADC;AAEPqB,YAAAA,MAAM,EAANA;AAFO,WAAD,CAAR;AAID;AACF;AACF;;AAEDN,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCX,QAAlC;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCZ,QAArC;AACD,KAFD,CAnBc,CAqBX;AACJ,GAtBQ,EAsBN,CAACP,WAAD,EAAcC,eAAd,EAA+BF,SAA/B,CAtBM,CAAT;AAwBA,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADT,EAEGE,SAAS,CAACqB,GAAV,CAAc,UAACtB,IAAD;AAAA,WACb,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACkB,EAApB;AAAwB,MAAA,IAAI,EAAElB,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa;AAAA,GAAd,CAFH,CADF;AAQD,CA3CD;;GAAMJ,I;UACWR,W,EAC6EA,W,EAC3ED,W;;;KAHbS,I;;AAsDN,eAAeA,IAAf","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\nimport React, { useEffect } from 'react';\r\nimport { End } from 'redux-saga';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostCard from '../components/PostCard';\r\nimport PostFrom from '../components/PostForm';\r\nimport { LOAD_POST_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nconst Home = () => {\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostLoading, retweetError, retweetDone, addPostDone } = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n      alert(retweetError);\r\n    }\r\n  }, [retweetError]);\r\n\r\n  useEffect(() => { // infinite scroll 구현\r\n    function onScroll() {\r\n      // console.log(\r\n      //   window.scrollY,\r\n      //   document.documentElement.clientHeight,\r\n      //   document.documentElement.scrollHeight,\r\n      // );\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePost && !loadPostLoading) {\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n          dispatch({\r\n            type: LOAD_POST_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    }; // return을 안해주면 메모리에 계속 상주해서 성능 저하될 수 있으니 주의\r\n  }, [hasMorePost, loadPostLoading, mainPosts]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostFrom />}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps((context) => {\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n  });\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}