{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nexport const loginRequestAction = data => {\n  return {\n    type: 'LOG_IN_REQUEST',\n    data\n  };\n}; // logout action\n\nexport const logoutRequestAction = () => {\n  return {\n    type: 'LOG_OUT_REQUEST'\n  };\n};\n\nfunction logInAPI(data) {// return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {// return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {// signup api는 generator가 아님에 주의.\n  // return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI() {// signup api는 generator가 아님에 주의.\n  // return axios.post('/api/follow');\n}\n\nfunction* follow() {\n  try {\n    // const result = yield call(followAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI() {// signup api는 generator가 아님에 주의.\n  // return axios.post('/api/unfollow');\n}\n\nfunction* unfollow() {\n  try {\n    // const result = yield call(unfollowAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(LOG_OUT_REQUEST, follow); // takeLeading은 첫번째꺼\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(LOG_OUT_REQUEST, unfollow); // takeLeading은 첫번째꺼\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); // LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} // take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut); // takeLeading은 첫번째꺼\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); // takeLeading은 첫번째꺼\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","delay","put","axios","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginRequestAction","data","type","logoutRequestAction","logInAPI","logIn","action","err","error","response","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","unfollowAPI","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EACkBC,cADlB,EACkCC,cADlC,EAEEC,gBAFF,EAEoBC,gBAFpB,EAEsCC,gBAFtC,EAGEC,cAHF,EAGkBC,cAHlB,EAGkCC,cAHlC,EAIEC,eAJF,EAImBC,eAJnB,EAIoCC,eAJpC,EAKEC,eALF,EAKmBC,eALnB,EAKoCC,eALpC,QAMO,kBANP;AAQA,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAE,gBADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACvC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;;AAMP,SAASE,QAAT,CAAkBH,IAAlB,EAAwB,CACtB;AACD;;AAED,UAAUI,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEV,cADE;AAERS,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOM,GAAP,EAAY;AACZ,UAAMxB,GAAG,CAAC;AAAE;AACVmB,MAAAA,IAAI,EAAET,cADE;AAERe,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASS,SAAT,GAAqB,CACnB;AACD;;AAED,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAM7B,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEP,eADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOY,GAAP,EAAY;AACZ,UAAMxB,GAAG,CAAC;AAAE;AACVmB,MAAAA,IAAI,EAAEN,eADE;AAERY,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASW,SAAT,GAAqB,CAAE;AACrB;AACD;;AAED,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAM/B,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEJ,eADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOS,GAAP,EAAY;AACZ,UAAMxB,GAAG,CAAC;AAAE;AACVmB,MAAAA,IAAI,EAAEH,eADE;AAERS,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASa,SAAT,GAAqB,CAAE;AACrB;AACD;;AAED,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMjC,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEhB,cADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOqB,GAAP,EAAY;AACZ,UAAMxB,GAAG,CAAC;AAAE;AACVmB,MAAAA,IAAI,EAAEf,cADE;AAERqB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASe,WAAT,GAAuB,CAAE;AACvB;AACD;;AAED,UAAUC,QAAV,GAAqB;AACnB,MAAI;AACF;AACA,UAAMnC,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEb,gBADE,CAER;;AAFQ,KAAD,CAAT;AAID,GAPD,CAOE,OAAOkB,GAAP,EAAY;AACZ,UAAMxB,GAAG,CAAC;AAAE;AACVmB,MAAAA,IAAI,EAAEZ,gBADE;AAERkB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaR;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUiB,WAAV,GAAwB;AACtB,QAAMrC,UAAU,CAACa,eAAD,EAAkBqB,MAAlB,CAAhB,CADsB,CACqB;AAC5C;;AAED,UAAUI,aAAV,GAA0B;AACxB,QAAMtC,UAAU,CAACa,eAAD,EAAkBuB,QAAlB,CAAhB,CADwB,CACqB;AAC9C;;AAED,UAAUG,UAAV,GAAuB;AACrB,QAAMvC,UAAU,CAACU,cAAD,EAAiBc,KAAjB,CAAhB,CADqB,CACoB;AAC1C,C,CAAC;;;AAEF,UAAUgB,WAAV,GAAwB;AACtB,QAAMxC,UAAU,CAACa,eAAD,EAAkBiB,MAAlB,CAAhB,CADsB,CACqB;AAC5C;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMzC,UAAU,CAACgB,eAAD,EAAkBgB,MAAlB,CAAhB,CADsB,CACqB;AAC5C;;AAED,eAAe,UAAUU,QAAV,GAAqB;AAClC,QAAM5C,GAAG,CAAC,CACRC,IAAI,CAACsC,WAAD,CADI,EAERtC,IAAI,CAACuC,aAAD,CAFI,EAGRvC,IAAI,CAACwC,UAAD,CAHI,EAIRxC,IAAI,CAACyC,WAAD,CAJI,EAKRzC,IAAI,CAAC0C,WAAD,CALI,CAAD,CAAT;AAOD","sourcesContent":["import { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE,\n  UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE,\n  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n} from '../reducers/user';\n\nexport const loginRequestAction = (data) => {\n  return {\n    type: 'LOG_IN_REQUEST',\n    data,\n  };\n};\n\n// logout action\nexport const logoutRequestAction = () => {\n  return {\n    type: 'LOG_OUT_REQUEST',\n  };\n};\n\nfunction logInAPI(data) {\n  // return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  // return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction signUpAPI() { // signup api는 generator가 아님에 주의.\n  // return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction followAPI() { // signup api는 generator가 아님에 주의.\n  // return axios.post('/api/follow');\n}\n\nfunction* follow() {\n  try {\n    // const result = yield call(followAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: FOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction unfollowAPI() { // signup api는 generator가 아님에 주의.\n  // return axios.post('/api/unfollow');\n}\n\nfunction* unfollow() {\n  try {\n    // const result = yield call(unfollowAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(LOG_OUT_REQUEST, follow); // takeLeading은 첫번째꺼\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(LOG_OUT_REQUEST, unfollow); // takeLeading은 첫번째꺼\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); // LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} // take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut); // takeLeading은 첫번째꺼\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); // takeLeading은 첫번째꺼\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchFollow),\n    fork(watchUnfollow),\n    fork(watchLogIn),\n    fork(watchLogOut),\n    fork(watchSignUp),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}