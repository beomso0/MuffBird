{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from '../reducers';\n\nvar configureStore = function configureStore() {\n  var middlewares = [thunkMiddleware];\n  var enhancer = false // 이 조건문이 true면 ? 값으로 변수 지정, false면 : 값으로 지정.\n  ? compose(applyMiddleware.apply(void 0, middlewares)) //배포용일 때는 devtool에 연결 x\n  : compose(composeWithDevTools.apply(void 0, middlewares)); //개발모드에서는 devtool에 연결.\n\n  var store = createStore(reducer, enhancer); // store는 state랑 reducer를 포함\n\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper; // ==> 이제 _app.js 가서 Nodebirde를 wrapper로 감싸줌","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","composeWithDevTools","thunkMiddleware","reducer","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAMC,WAAW,GAAG,CAACH,eAAD,CAApB;AACA,MAAMI,QAAQ,GAAG,MAAsC;AAAtC,IACXN,OAAO,CAACD,eAAe,MAAf,SAAmBM,WAAnB,CAAD,CADI,CAC8B;AAD9B,IAEXL,OAAO,CAACC,mBAAmB,MAAnB,SAAuBI,WAAvB,CAAD,CAFb,CAFyB,CAI0B;;AACnD,MAAME,KAAK,GAAGT,WAAW,CAACK,OAAD,EAAUG,QAAV,CAAzB,CALyB,CAKqB;;AAC9C,SAAOC,KAAP;AACH,CAPD;;AASA,IAAMC,OAAO,GAAGX,aAAa,CAACO,cAAD,EAAiB;AAAEK,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf,C,CAAwB","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport reducer from '../reducers';\r\n\r\nconst configureStore = () => {\r\n    const middlewares = [thunkMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production' // 이 조건문이 true면 ? 값으로 변수 지정, false면 : 값으로 지정.\r\n        ? compose(applyMiddleware(...middlewares)) //배포용일 때는 devtool에 연결 x\r\n        : compose(composeWithDevTools(...middlewares)) //개발모드에서는 devtool에 연결.\r\n    const store = createStore(reducer, enhancer); // store는 state랑 reducer를 포함\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development'}); \r\n\r\nexport default wrapper; // ==> 이제 _app.js 가서 Nodebirde를 wrapper로 감싸줌\r\n\r\n"]},"metadata":{},"sourceType":"module"}