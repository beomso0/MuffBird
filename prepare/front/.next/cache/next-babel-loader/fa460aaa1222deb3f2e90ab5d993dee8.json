{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\n// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\nimport { all, fork, call, put, take } from 'redux-saga/effects';\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return take('LOG_IN');\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return take('LOG_OUT');\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return take('ADD_POST');\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/index.js"],"names":["watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","call","put","take"],"mappings":";;oDAOUA,U;qDAIAC,W;qDAIAC,Y;qDAIeC,Q;;AAnBzB;AACA;AACA;AACA;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;;AAEA,SAAUR,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,IAAI,CAAC,QAAD,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUP,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,IAAI,CAAC,SAAD,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUN,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,IAAI,CAAC,UAAD,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUL,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,UAAD,CADE,EAENK,IAAI,CAACJ,WAAD,CAFE,EAGNI,IAAI,CAACH,YAAD,CAHE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\n\nimport { all, fork, call, put, take } from 'redux-saga/effects';\n\nfunction* watchLogIn() {\n    yield take('LOG_IN');\n}\n\nfunction* watchLogOut() {\n    yield take('LOG_OUT');\n}\n\nfunction* watchAddPost() {\n    yield take('ADD_POST');\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchAddPost),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}