{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {// return axios.get('/api/post', data);\n}\n\nfunction* loadPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      } // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {// return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      } // data: result.data,\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {// return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {// return axios.post('/api/post', data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","axios","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","loadPost","action","id","generate","type","content","err","response","addPostAPI","addPost","removePostAPI","removePost","addCommentAPI","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  // return axios.get('/api/post', data);\n}\n\nfunction* loadPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(loadPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  // return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n      // data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n      // data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  // return axios.post('/api/post', data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}