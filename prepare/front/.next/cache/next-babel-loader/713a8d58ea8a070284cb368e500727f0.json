{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from \"next-redux-wrapper\"; //hydrate는 액션 중 하나 \n\nvar initialState = {\n  //data구조 미리 잡아놓기\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n}; //login action creator\n\nexport var loginAction = function loginAction(data) {\n  return {\n    type: 'LOG_IN',\n    data: data\n  };\n}; //logout action\n\nexport var logoutAction = function logoutAction() {\n  return {\n    type: 'LOG_OUT'\n  };\n}; //action creator //action은 객체임!!\n\nvar changeNickname = function changeNickname(data) {\n  return {\n    type: 'CHANE_NICKNAME',\n    data: data\n  };\n}; // --> store.dispatch(changeNickname('mama muffin'))\n\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //처음 객체 펴주기\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          //참조관계 유지\n          isLoggedIn: true,\n          //내가 바꾸고 싶은 부분만 수정\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //처음 객체 펴주기\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          //참조관계 유지\n          isLoggedIn: false,\n          //내가 바꾸고 싶은 부분만 수정\n          user: null\n        })\n      });\n\n    default:\n      return state;\n    // reducer 초기화 때도 rootReducer가 실행되기 때문에 default 동작도 지정해주어야 함.\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/User/Documents/Compu/birdSns/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","changeNickname","rootReducer","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CAA8C;;AAE9C,IAAMC,YAAY,GAAG;AAAE;AACnBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,KADV;AAEFD,IAAAA,IAAI,EAAE,IAFJ;AAGFE,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT,GADW;AAOjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAE;AADT;AAPW,CAArB,C,CAYA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM,C,CAMP;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACH,IAAD,EAAU;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAE,gBADH;AAEHD,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH,CALD,C,CAKG;;;AAEH,IAAMI,WAAW,GAAI,SAAfA,WAAe,GAAgC;AAAA,MAA/BC,KAA+B,uEAAzBb,YAAyB;AAAA,MAAXc,MAAW;;AACjD,UAAOA,MAAM,CAACL,IAAd;AACI,SAAKV,OAAL;AACIgB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,6CAAYD,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AAEJ,SAAK,QAAL;AACI,6CACOJ,KADP;AACc;AACVZ,QAAAA,IAAI,kCACGY,KAAK,CAACZ,IADT;AACe;AACfC,UAAAA,UAAU,EAAE,IAFZ;AAEkB;AAClBD,UAAAA,IAAI,EAAEa,MAAM,CAACN;AAHb;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOK,KADP;AACc;AACVZ,QAAAA,IAAI,kCACGY,KAAK,CAACZ,IADT;AACe;AACfC,UAAAA,UAAU,EAAE,KAFZ;AAEmB;AACnBD,UAAAA,IAAI,EAAE;AAHN;AAFR;;AAQJ;AACI,aAAOY,KAAP;AAAc;AAxBtB;AA0BH,CA3BD;;AA6BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\"; //hydrate는 액션 중 하나 \r\n\r\nconst initialState = { //data구조 미리 잡아놓기\r\n    user: {\r\n        isLoggedIn: false,\r\n        user: null,\r\n        signUpData: {},\r\n        loginData: {},\r\n    },\r\n    post: {\r\n        mainPosts: [],\r\n    },\r\n};\r\n\r\n//login action creator\r\nexport const loginAction = (data) => {\r\n    return {\r\n        type: 'LOG_IN',\r\n        data,\r\n    }\r\n}\r\n\r\n//logout action\r\nexport const logoutAction = () => {\r\n    return {\r\n        type: 'LOG_OUT',\r\n    }\r\n}\r\n\r\n//action creator //action은 객체임!!\r\nconst changeNickname = (data) => {\r\n    return {\r\n        type: 'CHANE_NICKNAME',\r\n        data\r\n    }\r\n}; // --> store.dispatch(changeNickname('mama muffin'))\r\n\r\nconst rootReducer = ((state=initialState, action) => {\r\n    switch(action.type) {\r\n        case HYDRATE:\r\n            console.log('HYDRATE', action);\r\n            return { ...state, ...action.payload };\r\n\r\n        case 'LOG_IN':\r\n            return {\r\n                ...state, //처음 객체 펴주기\r\n                user: { //초기 객체 안에 유저 객체 펴주기\r\n                    ...state.user, //참조관계 유지\r\n                    isLoggedIn: true, //내가 바꾸고 싶은 부분만 수정\r\n                    user: action.data,\r\n                },\r\n            };\r\n        case 'LOG_OUT':\r\n            return {\r\n                ...state, //처음 객체 펴주기\r\n                user: { //초기 객체 안에 유저 객체 펴주기\r\n                    ...state.user, //참조관계 유지\r\n                    isLoggedIn: false, //내가 바꾸고 싶은 부분만 수정\r\n                    user: null,\r\n                },\r\n            };\r\n        default :\r\n            return state; // reducer 초기화 때도 rootReducer가 실행되기 때문에 default 동작도 지정해주어야 함.\r\n    }\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}