{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {// return axios.delete('/api/post', data, {\n  //   withCredentials: true,\n  // });\n}\n\nfunction* removePost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","loadPost","action","result","type","err","response","addPostAPI","post","content","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","console","error","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","watchLikePost","likePost","watchUnlikePost","unlikePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', { content: data });\n}\n\nfunction* addPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // return axios.delete('/api/post', data, {\n  //   withCredentials: true,\n  // });\n}\n\nfunction* removePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n      // data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}