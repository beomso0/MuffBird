{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\n// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\nimport { all, fork, call, take, put, takeEvery, takeLatest, throttle, delay } from 'redux-saga/effects';\nimport postSaga from './post';\nimport userSaga from './user'; //call은 동기 함수라서 결과 올떄까지 기다림 <-> fork는 비동기 함수 요청이라서, 결과 기다리지 않고 바로 다음줄 실행.\n// yield는 await이랑 비슷한 역할이라고 생각해도 됨.\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(postSaga), //fork는 함수를 실행하는 것. \n          fork(userSaga) //근데 call이랑은 다름. then, how different?\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/index.js"],"names":["rootSaga","all","fork","call","take","put","takeEvery","takeLatest","throttle","delay","postSaga","userSaga"],"mappings":";;oDAayBA,Q;;AAbzB;AACA;AACA;AACA;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,SAArC,EAAgDC,UAAhD,EAA4DC,QAA5D,EAAsEC,KAAtE,QAAmF,oBAAnF;AACA,OAAOC,QAAP,MAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,QAArB,C,CAGA;AACA;;AAEA,eAAe,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACQ,QAAD,CADE,EACU;AAChBR,UAAAA,IAAI,CAACS,QAAD,CAFE,CAEU;AAFV,WAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\n\nimport { all, fork, call, take, put, takeEvery, takeLatest, throttle, delay } from 'redux-saga/effects';\nimport postSaga from './post';\nimport userSaga from './user';\n\n\n//call은 동기 함수라서 결과 올떄까지 기다림 <-> fork는 비동기 함수 요청이라서, 결과 기다리지 않고 바로 다음줄 실행.\n// yield는 await이랑 비슷한 역할이라고 생각해도 됨.\n\nexport default function* rootSaga() {\n    yield all([\n        fork(postSaga), //fork는 함수를 실행하는 것. \n        fork(userSaga), //근데 call이랑은 다름. then, how different?\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}