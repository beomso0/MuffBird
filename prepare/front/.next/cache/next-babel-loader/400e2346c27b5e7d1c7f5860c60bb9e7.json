{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\nimport axios from 'axios';\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}\nexport const loginRequestAction = data => {\n  return {\n    type: 'LOG_IN_REQUEST',\n    data\n  };\n}; //logout action\n\nexport const logoutRequestAction = () => {\n  return {\n    type: 'LOG_OUT_REQUEST'\n  };\n};\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut); //takeLeading은 첫번째꺼\n}\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: 'LOG_IN_FAILURE' // data: err.response.data,\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS' // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: 'LOG_OUT_FAILURE' // data: err.response.data,\n\n    });\n  }\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","delay","put","axios","userSaga","watchLogIn","watchLogOut","loginRequestAction","data","type","logoutRequestAction","logIn","logOut","logInAPI","post","action","err","logOutAPI"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAoD,oBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMN,GAAG,CAAC,CACNC,IAAI,CAACM,UAAD,CADE,EAENN,IAAI,CAACO,WAAD,CAFE,CAAD,CAAT;AAIH;AAED,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;AACxC,SAAO;AACHC,IAAAA,IAAI,EAAE,gBADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM;;AAMP,UAAUJ,UAAV,GAAuB;AACnB,QAAML,UAAU,CAAC,gBAAD,EAAmBW,KAAnB,CAAhB,CADmB,CACwB;AAC9C,C,CAAC;;;AAEF,UAAUL,WAAV,GAAwB;AACpB,QAAMN,UAAU,CAAC,iBAAD,EAAoBY,MAApB,CAAhB,CADoB,CACyB;AAChD;;AAED,SAASC,QAAT,CAAkBL,IAAlB,EAAwB;AACpB,SAAOL,KAAK,CAACW,IAAN,CAAW,YAAX,EAAyBN,IAAzB,CAAP;AACH;;AAED,UAAUG,KAAV,CAAgBI,MAAhB,EAAwB;AACpB,MAAG;AACC;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,gBADA;AAEND,MAAAA,IAAI,EAAEO,MAAM,CAACP;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACV,UAAMd,GAAG,CAAC;AAAE;AACRO,MAAAA,IAAI,EAAE,gBADA,CAEN;;AAFM,KAAD,CAAT;AAIH;AACJ;;AAED,SAASQ,SAAT,GAAqB;AACjB,SAAOd,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUF,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAMX,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOO,GAAP,EAAY;AACV,UAAMd,GAAG,CAAC;AAAE;AACRO,MAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,KAAD,CAAT;AAIH;AACJ","sourcesContent":["import { all, fork, takeLatest, delay, put,  } from \"redux-saga/effects\";\nimport axios from 'axios';\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n    ])\n}\n\nexport const loginRequestAction = (data) => {\n    return {\n        type: 'LOG_IN_REQUEST',\n        data,\n    }\n}\n\n//logout action\nexport const logoutRequestAction = () => {\n    return {\n        type: 'LOG_OUT_REQUEST',\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut); //takeLeading은 첫번째꺼\n}\n\nfunction logInAPI(data) {\n    return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n    try{\n        // const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_IN_FAILURE',\n            // data: err.response.data,\n        });\n    }    \n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n    try{\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            // data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_OUT_FAILURE',\n            // data: err.response.data,\n        });\n    }    \n}"]},"metadata":{},"sourceType":"module"}