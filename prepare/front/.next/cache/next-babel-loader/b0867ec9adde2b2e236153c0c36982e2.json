{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadOnePost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadOnePost),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_ONE_POST_REQUEST, LOAD_ONE_POST_SUCCESS, LOAD_ONE_POST_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadOnePostAPI(data) {\n  return axios.get(\"/post/\".concat(data)); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction loadOnePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadOnePost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadOnePostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_ONE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: LOAD_ONE_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction loadPostAPI(lastId) {\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0)); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadPostAPI, action.lastId);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: LOAD_POST_FAILURE // data: err.response,\n\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(\"/hashtag/\".concat(data, \"?lastId=\").concat(lastId || 0));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            data: _context3.t0.response\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: LOAD_USER_POSTS_FAILURE,\n            data: _context4.t0.response\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); // POST/post\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context5.next = 14;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 14;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: ADD_POST_FAILURE // data: err.response.data,\n\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data)); // DELETE에는 데이터 넣을 수 없음.\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data // data: result.data,\n\n          });\n\n        case 6:\n          _context6.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context6.next = 14;\n          break;\n\n        case 10:\n          _context6.prev = 10;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 14;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: REMOVE_POST_FAILURE // data: err.response.data,\n\n          });\n\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); // Post / 1 / comment\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data // data: result.data,\n\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: ADD_COMMENT_FAILURE // data: err.response.data,\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\")); // 여기서 data는 post.id\n  // patch는 table(여기서는 post)의 일부분 수정할 때 사용함.\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data // data: result.data,\n\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: LIKE_POST_FAILURE // data: err.response.data,\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data // data: result.data,\n\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: UNLIKE_POST_FAILURE // data: err.response.data,\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data // data: result.data,\n\n          });\n\n        case 6:\n          _context10.next = 13;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error(_context10.t0);\n          _context10.next = 13;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: UPLOAD_IMAGES_FAILURE // data: err.response.data,\n\n          });\n\n        case 13:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data // data: result.data,\n\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: RETWEET_FAILURE,\n            error: _context11.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchLoadOnePost() {\n  return _regeneratorRuntime.wrap(function watchLoadOnePost$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(LOAD_ONE_POST_REQUEST, loadOnePost);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadOnePost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost)]);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/post.js"],"names":["loadOnePost","loadPost","loadHashtagPosts","loadUserPosts","addPost","removePost","addComment","likePost","unlikePost","uploadImages","retweet","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","watchLoadOnePost","watchLoadUserPosts","watchLoadHashtagPosts","postSaga","all","fork","takeLatest","put","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_ONE_POST_REQUEST","LOAD_ONE_POST_SUCCESS","LOAD_ONE_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadOnePostAPI","data","get","action","result","type","response","loadPostAPI","lastId","loadHashtagPostsAPI","loadUserPostsAPI","addPostAPI","post","id","removePostAPI","addCommentAPI","postId","console","error","likePostAPI","patch","unlikePostAPI","uploadImagesAPI","retweetAPI"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n  RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\n  LOAD_ONE_POST_REQUEST, LOAD_ONE_POST_SUCCESS, LOAD_ONE_POST_FAILURE,\n  LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadOnePostAPI(data) {\n  return axios.get(`/post/${data}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadOnePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadOnePostAPI, action.data);\n    yield put({\n      type: LOAD_ONE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_ONE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadPostAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.lastId);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      // data: err.response,\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response,\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); // POST/post\n}\n\nfunction* addPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); // DELETE에는 데이터 넣을 수 없음.\n}\n\nfunction* removePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); // 여기서 data는 post.id\n  // patch는 table(여기서는 post)의 일부분 수정할 때 사용함.\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LIKE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UNLIKE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data); // action.data: imageFormData\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UPLOAD_IMAGES_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data); // action.data: imageFormData\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: RETWEET_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadOnePost() {\n  yield takeLatest(LOAD_ONE_POST_REQUEST, loadOnePost);\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchRetweet),\n    fork(watchUploadImages),\n    fork(watchAddPost),\n    fork(watchLoadPost),\n    fork(watchLoadUserPosts),\n    fork(watchLoadHashtagPosts),\n    fork(watchLoadOnePost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}