{"ast":null,"code":"var _jsxFileName = \"/Users/beomso0/Desktop/godev/birdSns/prepare/front/components/FollowList.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { List, Button, Card } from 'antd';\nimport PropTypes from 'prop-types';\nimport { StopOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nimport { UNFOLLOW_REQUEST, REMOVE_FOLLOWER_REQUEST } from '../reducers/user';\n\nconst FollowList = ({\n  header,\n  data,\n  OnClickMore,\n  loading\n}) => {\n  const dispatch = useDispatch();\n\n  const onCancel = id => () => {\n    // 반복문 안에서 활용할 때 이렇게 고차 함수로 하용함.\n    if (header === '팔로잉') {\n      dispatch({\n        type: UNFOLLOW_REQUEST,\n        data: id\n      });\n    }\n\n    if (header === '팔로워') {\n      dispatch({\n        type: REMOVE_FOLLOWER_REQUEST,\n        data: id\n      });\n    }\n  };\n\n  return __jsx(List, {\n    style: {\n      marginBottom: 20\n    },\n    grid: {\n      gutter: 4,\n      xs: 2,\n      md: 3\n    },\n    size: \"small\",\n    header: __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }\n    }, header),\n    loadMore: __jsx(\"div\", {\n      style: {\n        textAlign: 'center',\n        margin: '10px 0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 72\n      }\n    }, \"\\uB354 \\uBCF4\\uAE30\")) // 실제로는 이 style 값들 최적화해줘야 함. styled or useMemo.\n    ,\n    bordered: true,\n    dataSource: data // --> 배열임.\n    ,\n    renderItem: item => // 여기에서 배열 data의 객체들이 반복되며 그려짐\n    __jsx(List.Item, {\n      style: {\n        marginTop: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, __jsx(Card, {\n      actions: [__jsx(StopOutlined, {\n        key: \"stop\",\n        onClick: onCancel(item.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 27\n        }\n      })],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, __jsx(Card.Meta, {\n      description: item.nickname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  });\n};\n\nFollowList.propTypes = {\n  header: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired,\n  onClickMore: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired\n};\nexport default FollowList;","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/components/FollowList.js"],"names":["React","List","Button","Card","PropTypes","StopOutlined","useDispatch","UNFOLLOW_REQUEST","REMOVE_FOLLOWER_REQUEST","FollowList","header","data","OnClickMore","loading","dispatch","onCancel","id","type","marginBottom","gutter","xs","md","textAlign","margin","item","marginTop","nickname","propTypes","string","isRequired","array","onClickMore","func","bool"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { List, Button, Card } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { StopOutlined } from '@ant-design/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { UNFOLLOW_REQUEST, REMOVE_FOLLOWER_REQUEST } from '../reducers/user';\r\n\r\nconst FollowList = ({ header, data, OnClickMore, loading }) => {\r\n  const dispatch = useDispatch();\r\n  const onCancel = (id) => () => { // 반복문 안에서 활용할 때 이렇게 고차 함수로 하용함.\r\n    if (header === '팔로잉') {\r\n      dispatch({\r\n        type: UNFOLLOW_REQUEST,\r\n        data: id,\r\n      });\r\n    }\r\n    if (header === '팔로워') {\r\n      dispatch({\r\n        type: REMOVE_FOLLOWER_REQUEST,\r\n        data: id,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <List\r\n      style={{ marginBottom: 20 }}\r\n      grid={{ gutter: 4, xs: 2, md: 3 }}\r\n      size=\"small\"\r\n      header={<div>{header}</div>}\r\n      loadMore={<div style={{ textAlign: 'center', margin: '10px 0' }}><Button>더 보기</Button></div>} // 실제로는 이 style 값들 최적화해줘야 함. styled or useMemo.\r\n      bordered\r\n      dataSource={data} // --> 배열임.\r\n      renderItem={(item) => ( // 여기에서 배열 data의 객체들이 반복되며 그려짐\r\n        <List.Item style={{ marginTop: 20 }}>\r\n          <Card actions={[<StopOutlined key=\"stop\" onClick={onCancel(item.id)} />]}>\r\n            <Card.Meta description={item.nickname} />\r\n          </Card>\r\n        </List.Item>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nFollowList.propTypes = {\r\n  header: PropTypes.string.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n  onClickMore: PropTypes.func.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default FollowList;\r\n"]},"metadata":{},"sourceType":"module"}