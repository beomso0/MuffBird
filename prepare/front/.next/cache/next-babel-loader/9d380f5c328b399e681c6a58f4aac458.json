{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/beomso0/Desktop/godev/birdSns/prepare/front/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport AppLayout from '../components/AppLayout';\nimport PostCard from '../components/PostCard';\nimport PostFrom from '../components/PostForm';\nimport { LOAD_POST_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\n\nvar Home = function Home() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostLoading = _useSelector2.loadPostLoading,\n      retweetError = _useSelector2.retweetError,\n      retweetDone = _useSelector2.retweetDone;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (retweetError) {\n      return alert(retweetError);\n    }\n\n    if (retweetDone) {\n      return dispatch({\n        type: LOAD_POST_REQUEST\n      });\n    }\n  }, [retweetError, retweetDone]);\n  useEffect(function () {\n    dispatch({\n      type: LOAD_MY_INFO_REQUEST\n    });\n    dispatch({\n      type: LOAD_POST_REQUEST\n    });\n  }, []); // useEffect의 배열 안의 인자는 검사 대상?을 가리킴. 빈 배열 넣으면 --> 처음 렌더링 시 한 번만 실행.\n\n  useEffect(function () {\n    // infinite scroll 구현\n    function onScroll() {\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostLoading) {\n          dispatch({\n            type: LOAD_POST_REQUEST\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    }; // return을 안해주면 메모리에 계속 상주해서 성능 저하될 수 있으니 주의\n  }, [hasMorePost]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, me && __jsx(PostFrom, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 14\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\n_s(Home, \"Rbynkaponwk0mXocZXSqPIqMDKM=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/pages/index.js"],"names":["useDispatch","useSelector","React","useEffect","AppLayout","PostCard","PostFrom","LOAD_POST_REQUEST","LOAD_MY_INFO_REQUEST","Home","state","user","me","post","mainPosts","hasMorePost","loadPostLoading","retweetError","retweetDone","dispatch","alert","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","map","id"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\nimport React, { useEffect } from 'react';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostCard from '../components/PostCard';\r\nimport PostFrom from '../components/PostForm';\r\nimport { LOAD_POST_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\n\r\nconst Home = () => {\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostLoading, retweetError, retweetDone } = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n      return alert(retweetError);\r\n    }\r\n    if (retweetDone) {\r\n      return dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n      });\r\n    }\r\n  }, [retweetError, retweetDone]);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    dispatch({\r\n      type: LOAD_POST_REQUEST,\r\n    });\r\n  }, []); // useEffect의 배열 안의 인자는 검사 대상?을 가리킴. 빈 배열 넣으면 --> 처음 렌더링 시 한 번만 실행.\r\n\r\n  useEffect(() => { // infinite scroll 구현\r\n    function onScroll() {\r\n      console.log(\r\n        window.scrollY,\r\n        document.documentElement.clientHeight,\r\n        document.documentElement.scrollHeight,\r\n      );\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePost && !loadPostLoading) {\r\n          dispatch({\r\n            type: LOAD_POST_REQUEST,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    }; // return을 안해주면 메모리에 계속 상주해서 성능 저하될 수 있으니 주의\r\n  }, [hasMorePost]);\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostFrom />}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}