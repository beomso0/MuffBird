{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10) // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {// return axios.delete('/api/post', data, {\n  //   withCredentials: true,\n  // });\n}\n\nfunction* removePost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","call","axios","shortId","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","loadPost","action","result","id","generate","type","err","response","addPostAPI","post","content","addPost","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10),\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', { content: data });\n}\n\nfunction* addPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  // return axios.delete('/api/post', data, {\n  //   withCredentials: true,\n  // });\n}\n\nfunction* removePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n      // data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}