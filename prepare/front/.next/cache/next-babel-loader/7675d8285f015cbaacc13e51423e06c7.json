{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(postSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost);\n\nimport { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\nimport axios from 'axios';\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'ADD_POST_SUCCESS' // data: result.data,\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: 'ADD_POST_FAILURE' // data: err.response.data,\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/post.js"],"names":["postSaga","addPost","watchAddPost","all","fork","takeLatest","delay","put","axios","addPostAPI","data","post","action","type"],"mappings":";;oDAGyBA,Q;qDAUfC,O;qDAgBAC,Y;;AA7BV,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAAUR,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,GAAG,CAAC,CACNC,IAAI,CAACF,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMf,SAASO,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAAUT,OAAV,CAAkBW,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,kBADA,CAEN;;AAFM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMN,GAAG,CAAC;AAAE;AACRM,YAAAA,IAAI,EAAE,kBADA,CAEN;;AAFM,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUX,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMG,UAAU,CAAC,kBAAD,EAAqBJ,OAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\nimport axios from 'axios';\n\nexport default function* postSaga () {\n    yield all([\n        fork(watchAddPost),\n    ])\n}\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try{\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            // data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'ADD_POST_FAILURE',\n            // data: err.response.data,\n        });\n    }    \n}\n\nfunction* watchAddPost() {\n    yield takeLatest('ADD_POST_REQUEST', addPost);\n}"]},"metadata":{},"sourceType":"module"}