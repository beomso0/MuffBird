{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from \"next-redux-wrapper\"; //hydrate는 액션 중 하나 \n\nimport user from './user';\nimport post from './post';\nvar initialState = {\n  //data구조 미리 잡아놓기\n  user: {},\n  post: {}\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n    // reducer 초기화 때도 rootReducer가 실행되기 때문에 default 동작도 지정해주어야 함.\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/User/Documents/Compu/birdSns/prepare/front/reducers/index.js"],"names":["HYDRATE","user","post","initialState","rootReducer","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CAA8C;;AAE9C,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAMC,YAAY,GAAG;AAAE;AACnBF,EAAAA,IAAI,EAAE,EADW;AAIjBC,EAAAA,IAAI,EAAE;AAJW,CAArB;;AAWA,IAAME,WAAW,GAAI,SAAfA,WAAe,GAAgC;AAAA,MAA/BC,KAA+B,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,OAAL;AACIQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,6CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AAEJ;AACI,aAAOL,KAAP;AAAc;AANtB;AAQH,CATD;;AAWA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\"; //hydrate는 액션 중 하나 \r\n\r\nimport user from './user';\r\nimport post from './post';\r\n\r\nconst initialState = { //data구조 미리 잡아놓기\r\n    user: {\r\n\r\n    },\r\n    post: {\r\n\r\n    },\r\n};\r\n\r\n\r\n\r\nconst rootReducer = ((state=initialState, action) => {\r\n    switch(action.type) {\r\n        case HYDRATE:\r\n            console.log('HYDRATE', action);\r\n            return { ...state, ...action.payload };\r\n\r\n        default :\r\n            return state; // reducer 초기화 때도 rootReducer가 실행되기 때문에 default 동작도 지정해주어야 함.\r\n    }\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}