{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  // 게시 완료되면 true\n  addPostDone: false,\n  addPostError: null,\n  loadPostLoading: false,\n  // 게시 완료되면 true\n  loadPostDone: false,\n  loadPostError: null,\n  removePostLoading: false,\n  // 게시 완료되면 true\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  // 게시 완료되면 true\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  // 게시 완료되면 true\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  // 게시 완료되면 true\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  // 게시 완료되면 true\n  uploadImagesDone: false,\n  uploadImagesError: null\n}; // export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraphs(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.paragraph(),\n//   }],\n// }));\n\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    // 이렇게 빼주면 reducer에서 재활용 가능\n    data: data // 작성한 글에 해당\n\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    // 이렇게 빼주면 reducer에서 재활용 가능\n    data: data // 작성한 글에 해당\n\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // 이게 immer의 기본꼴임. immer가 알아서 불변성을 지켜줌. state는 건드리면 안됨.\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          // action data PostId, UserId 들어있음.\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true; // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\n\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50; // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\n\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data); // 앞에다 추가를 해야 위에 올라감.\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        }); // 앞에다 추가를 해야 위에 올라감.\n\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts]; // 불변성을 유지하느라 코드가 이렇게 길어짐 ㅠㅠ\n      // mainPosts[postIndex] = post; // 이걸 편하게 할 수 있는 라이브러리가 '이머'\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","loadPostLoading","loadPostDone","loadPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","error","post","find","v","id","PostId","Likers","push","UserId","filter","concat","length","unshift","Comments"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  addPostLoading: false, // 게시 완료되면 true\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  loadPostLoading: false, // 게시 완료되면 true\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  removePostLoading: false, // 게시 완료되면 true\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false, // 게시 완료되면 true\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  likePostLoading: false, // 게시 완료되면 true\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false, // 게시 완료되면 true\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  uploadImagesLoading: false, // 게시 완료되면 true\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n};\r\n\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//   id: shortId.generate(),\r\n//   User: {\r\n//     id: shortId.generate(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraphs(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: shortId.generate(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.paragraph(),\r\n//   }],\r\n// }));\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST, // 이렇게 빼주면 reducer에서 재활용 가능\r\n  data, // 작성한 글에 해당\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST, // 이렇게 빼주면 reducer에서 재활용 가능\r\n  data, // 작성한 글에 해당\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => { // 이게 immer의 기본꼴임. immer가 알아서 불변성을 지켜줌. state는 건드리면 안됨.\r\n    switch (action.type) {\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesDone = false;\r\n        draft.uploadImagesError = null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS: {\r\n        draft.imagePaths = action.data;\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_FAILURE:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        // action data PostId, UserId 들어있음.\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.hasMorePost = draft.mainPosts.length < 50;\r\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(action.data); // 앞에다 추가를 해야 위에 올라감.\r\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId); // 앞에다 추가를 해야 위에 올라감.\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      }\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts]; // 불변성을 유지하느라 코드가 이렇게 길어짐 ㅠㅠ\r\n      // mainPosts[postIndex] = post; // 이걸 편하게 할 수 있는 라이브러리가 '이머'\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}