{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\n// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\nimport { all, fork, call, take, put, takeEvery, takeLatest, throttle, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS' // data: result.data,\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: 'LOG_IN_FAILURE' // data: err.response.data,\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS' // data: result.data,\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: 'LOG_OUT_FAILURE' // data: err.response.data,\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: 'ADD_POST_SUCCESS' // data: result.data,\n\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            // put은 dispatch와 거의 같음.\n            type: 'ADD_POST_FAILURE' // data: err.response.data,\n\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n} //call은 동기 함수라서 결과 올떄까지 기다림 <-> fork는 비동기 함수 요청이라서, 결과 기다리지 않고 바로 다음줄 실행.\n// yield는 await이랑 비슷한 역할이라고 생각해도 됨.\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), //fork는 함수를 실행하는 것. \n          fork(watchLogOut), //근데 call이랑은 다름. then, how different?\n          fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/index.js"],"names":["logIn","logOut","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","call","take","put","takeEvery","takeLatest","throttle","delay","axios","logInAPI","data","post","action","type","logOutAPI","addPostAPI"],"mappings":"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","sourcesContent":["// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\n\nimport { all, fork, call, take, put, takeEvery, takeLatest, throttle, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n    return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n    try{\n        // const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            // data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_IN_FAILURE',\n            // data: err.response.data,\n        });\n    }    \n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n    try{\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            // data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_OUT_FAILURE',\n            // data: err.response.data,\n        });\n    }    \n}\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try{\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            // data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'ADD_POST_FAILURE',\n            // data: err.response.data,\n        });\n    }    \n}\n\n//call은 동기 함수라서 결과 올떄까지 기다림 <-> fork는 비동기 함수 요청이라서, 결과 기다리지 않고 바로 다음줄 실행.\n// yield는 await이랑 비슷한 역할이라고 생각해도 됨.\n\nfunction* watchLogIn() {\n    yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut); //takeLeading은 첫번째꺼\n}\n\nfunction* watchAddPost() {\n    yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogIn), //fork는 함수를 실행하는 것. \n        fork(watchLogOut), //근데 call이랑은 다름. then, how different?\n        fork(watchAddPost),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}