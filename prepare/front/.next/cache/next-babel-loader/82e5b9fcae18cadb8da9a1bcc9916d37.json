{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_ONE_POST_REQUEST, LOAD_ONE_POST_SUCCESS, LOAD_ONE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadOnePostAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadOnePost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadOnePostAPI, action.lastId);\n    yield put({\n      type: LOAD_ONE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_ONE_POST_FAILURE // data: err.response,\n\n    });\n  }\n}\n\nfunction loadPostAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.lastId);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE // data: err.response,\n\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); // POST/post\n}\n\nfunction* addPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); // DELETE에는 데이터 넣을 수 없음.\n}\n\nfunction* removePost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); // 여기서 data는 post.id\n  // patch는 table(여기서는 post)의 일부분 수정할 때 사용함.\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LIKE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: UNLIKE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data); // action.data: imageFormData\n\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: UPLOAD_IMAGES_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data); // action.data: imageFormData\n\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadOnePost() {\n  yield takeLatest(LOAD_ONE_POST_REQUEST, loadOnePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadOnePost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_ONE_POST_REQUEST","LOAD_ONE_POST_SUCCESS","LOAD_ONE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadOnePostAPI","lastId","get","loadOnePost","action","result","type","data","err","loadPostAPI","loadPost","addPostAPI","post","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","console","error","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","uploadImagesAPI","uploadImages","retweetAPI","retweet","response","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","watchLoadOnePost","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n  RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\n  LOAD_ONE_POST_REQUEST, LOAD_ONE_POST_SUCCESS, LOAD_ONE_POST_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadOnePostAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadOnePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadOnePostAPI, action.lastId);\n    yield put({\n      type: LOAD_ONE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_ONE_POST_FAILURE,\n      // data: err.response,\n    });\n  }\n}\n\nfunction loadPostAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.lastId);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      // data: err.response,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); // POST/post\n}\n\nfunction* addPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); // DELETE에는 데이터 넣을 수 없음.\n}\n\nfunction* removePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); // 여기서 data는 post.id\n  // patch는 table(여기서는 post)의 일부분 수정할 때 사용함.\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LIKE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UNLIKE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data); // action.data: imageFormData\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UPLOAD_IMAGES_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data); // action.data: imageFormData\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: RETWEET_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadOnePost() {\n  yield takeLatest(LOAD_ONE_POST_REQUEST, loadOnePost);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchRetweet),\n    fork(watchUploadImages),\n    fork(watchAddPost),\n    fork(watchLoadPost),\n    fork(watchLoadOnePost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}