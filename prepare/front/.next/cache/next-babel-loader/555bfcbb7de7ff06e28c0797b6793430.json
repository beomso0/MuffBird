{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'beomso0'\n    },\n    content: '첫번째 게시글 #해시태그 #하이하이',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        // 대문자로 된 애들에는 다 id가 있어야 함!!\n        nickname: 'beomso0'\n      },\n      content: 'Great!'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'muffin'\n      },\n      content: 'hihi'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  // 게시 완료되면 true\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  // 게시 완료되면 true\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  // 게시 완료되면 true\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    // 이렇게 빼주면 reducer에서 재활용 가능\n    data: data // 작성한 글에 해당\n\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    // 이렇게 빼주면 reducer에서 재활용 가능\n    data: data // 작성한 글에 해당\n\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '뭉수'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '뭉수'\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // 이게 immer의 기본꼴임. immer가 알아서 불변성을 지켜줌. state는 건드리면 안됨.\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data)); // 앞에다 추가를 해야 위에 올라감.\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = state.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        }); // 앞에다 추가를 해야 위에 올라감.\n\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addPostDone = true;\n        break;\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts]; // 불변성을 유지하느라 코드가 이렇게 길어짐 ㅠㅠ\n      // mainPosts[postIndex] = post; // 이걸 편하게 할 수 있는 라이브러리가 '이머'\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [{\r\n    id: 1,\r\n    User: {\r\n      id: 1,\r\n      nickname: 'beomso0',\r\n    },\r\n    content: '첫번째 게시글 #해시태그 #하이하이',\r\n    Images: [{\r\n      id: shortId.generate(),\r\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n    }, {\r\n      id: shortId.generate(),\r\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n    }, {\r\n      id: shortId.generate(),\r\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n    }],\r\n    Comments: [{\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(), // 대문자로 된 애들에는 다 id가 있어야 함!!\r\n        nickname: 'beomso0',\r\n      },\r\n      content: 'Great!',\r\n    }, {\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: 'muffin',\r\n      },\r\n      content: 'hihi',\r\n    }],\r\n  }],\r\n  imagePaths: [],\r\n  addPostLoading: false, // 게시 완료되면 true\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false, // 게시 완료되면 true\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false, // 게시 완료되면 true\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST, // 이렇게 빼주면 reducer에서 재활용 가능\r\n  data, // 작성한 글에 해당\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST, // 이렇게 빼주면 reducer에서 재활용 가능\r\n  data, // 작성한 글에 해당\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '뭉수',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '뭉수',\r\n  },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => { // 이게 immer의 기본꼴임. immer가 알아서 불변성을 지켜줌. state는 건드리면 안됨.\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data)); // 앞에다 추가를 해야 위에 올라감.\r\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = state.mainPosts.filter((v) => v.id !== action.data); // 앞에다 추가를 해야 위에 올라감.\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addPostDone = true;\r\n        break;\r\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts]; // 불변성을 유지하느라 코드가 이렇게 길어짐 ㅠㅠ\r\n        // mainPosts[postIndex] = post; // 이걸 편하게 할 수 있는 라이브러리가 '이머'\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}