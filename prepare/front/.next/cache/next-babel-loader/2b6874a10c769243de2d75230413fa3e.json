{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\nexport const loginRequestAction = data => {\n  return {\n    type: 'LOG_IN_REQUEST',\n    data\n  };\n}; //logout action\n\nexport const logoutRequestAction = () => {\n  return {\n    type: 'LOG_OUT_REQUEST'\n  };\n};\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  //signup api는 generator가 아님에 주의.\n  return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut); //takeLeading은 첫번째꺼\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //takeLeading은 첫번째꺼\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","delay","put","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginRequestAction","data","type","logoutRequestAction","logInAPI","post","logIn","action","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAoD,oBAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EACoBC,cADpB,EACoCC,cADpC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,eAFtC,EAGIC,eAHJ,EAGqBC,eAHrB,EAGsCC,eAHtC,QAIS,kBAJT;AAMA,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;AACxC,SAAO;AACHC,IAAAA,IAAI,EAAE,gBADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM;;AAMP,SAASE,QAAT,CAAkBH,IAAlB,EAAwB;AACpB,SAAOX,KAAK,CAACe,IAAN,CAAW,YAAX,EAAyBJ,IAAzB,CAAP;AACH;;AAED,UAAUK,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAG;AACC;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEV,cADA;AAENS,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOO,GAAP,EAAY;AACV,UAAMnB,GAAG,CAAC;AAAE;AACRa,MAAAA,IAAI,EAAET,cADA;AAENgB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASU,SAAT,GAAqB;AACjB,SAAOrB,KAAK,CAACe,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUO,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEP,eADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOa,GAAP,EAAY;AACV,UAAMnB,GAAG,CAAC;AAAE;AACRa,MAAAA,IAAI,EAAEN,eADA;AAENa,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASY,SAAT,GAAqB;AAAE;AACnB,SAAOvB,KAAK,CAACe,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAM1B,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEJ,eADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOU,GAAP,EAAY;AACV,UAAMnB,GAAG,CAAC;AAAE;AACRa,MAAAA,IAAI,EAAEH,eADA;AAENU,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUc,UAAV,GAAuB;AACnB,QAAM5B,UAAU,CAACI,cAAD,EAAiBe,KAAjB,CAAhB,CADmB,CACsB;AAC5C,C,CAAC;;;AAEF,UAAUU,WAAV,GAAwB;AACpB,QAAM7B,UAAU,CAACO,eAAD,EAAkBkB,MAAlB,CAAhB,CADoB,CACuB;AAC9C;;AAED,UAAUK,WAAV,GAAwB;AACpB,QAAM9B,UAAU,CAACU,eAAD,EAAkBiB,MAAlB,CAAhB,CADoB,CACuB;AAC9C;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMjC,GAAG,CAAC,CACNC,IAAI,CAAC6B,UAAD,CADE,EAEN7B,IAAI,CAAC8B,WAAD,CAFE,EAGN9B,IAAI,CAAC+B,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, delay, put,  } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { \n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n  } from \"../reducers/user\";\n\nexport const loginRequestAction = (data) => {\n    return {\n        type: 'LOG_IN_REQUEST',\n        data,\n    }\n}\n\n//logout action\nexport const logoutRequestAction = () => {\n    return {\n        type: 'LOG_OUT_REQUEST',\n    }\n}\n\nfunction logInAPI(data) {\n    return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n    try{\n        // const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: LOG_IN_FAILURE,\n            error: err.response.data,\n        });\n    }    \n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n    try{\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n            // data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: LOG_OUT_FAILURE,\n            error: err.response.data,\n        });\n    }    \n}\n\nfunction signUpAPI() { //signup api는 generator가 아님에 주의.\n    return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n    try{\n        // const result = yield call(signUpAPI);\n        yield delay(1000);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n            // data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: SIGN_UP_FAILURE,\n            error: err.response.data,\n        });\n    }    \n}\n\nfunction* watchLogIn() {\n    yield takeLatest(LOG_IN_REQUEST, logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut); //takeLeading은 첫번째꺼\n}\n\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp); //takeLeading은 첫번째꺼\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchSignUp),\n    ])\n}"]},"metadata":{},"sourceType":"module"}