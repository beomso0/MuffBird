{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\"; //hydrate는 액션 중 하나 \n\nimport { combineReducers } from \"redux\";\nimport user from './user';\nimport post from './post';\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    //이건 hydrate(서버사이드렌더링)을 위해 index 리듀서를 추가한 것.\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n      // reducer 초기화 때도 rootReducer가 실행되기 때문에 default 동작도 지정해주어야 함.\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CAA8C;;AAC9C,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,WAAW,GAAGH,eAAe,CAAC;AAChCI,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAAE;AAC7B,YAAOA,MAAM,CAACC,IAAd;AACI,WAAKR,OAAL;AACIS,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACJ;AACI,eAAOL,KAAP;AAAc;AALtB;AAOH,GAT+B;AAUhCJ,EAAAA,IAVgC;AAWhCC,EAAAA;AAXgC,CAAD,CAAnC;AAcA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\"; //hydrate는 액션 중 하나 \r\nimport { combineReducers } from \"redux\";\r\n\r\nimport user from './user';\r\nimport post from './post';\r\n\r\nconst rootReducer = combineReducers({\r\n    index: (state = {}, action) => { //이건 hydrate(서버사이드렌더링)을 위해 index 리듀서를 추가한 것.\r\n        switch(action.type) {\r\n            case HYDRATE:\r\n                console.log('HYDRATE', action);\r\n                return { ...state, ...action.payload };    \r\n            default :\r\n                return state; // reducer 초기화 때도 rootReducer가 실행되기 때문에 default 동작도 지정해주어야 함.\r\n        }\r\n    },\r\n    user,\r\n    post,    \r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}