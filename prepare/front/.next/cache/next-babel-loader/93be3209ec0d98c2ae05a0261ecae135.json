{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  }); // POST/post\n}\n\nfunction* addPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); // DELETE에는 데이터 넣을 수 없음.\n}\n\nfunction* removePost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); // 여기서 data는 post.id\n  // patch는 table(여기서는 post)의 일부분 수정할 때 사용함.\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LIKE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: UNLIKE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: UPLOAD_IMAGES_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchUploadImages), fork(watchAddPost), fork(watchLoadPost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","loadPost","action","result","type","err","response","addPostAPI","post","content","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","console","error","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","uploadImagesAPI","uploadImages","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","watchLikePost","watchUnlikePost","watchUploadImages","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', { content: data }); // POST/post\n}\n\nfunction* addPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); // DELETE에는 데이터 넣을 수 없음.\n}\n\nfunction* removePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); // 여기서 data는 post.id\n  // patch는 table(여기서는 post)의 일부분 수정할 때 사용함.\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LIKE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UNLIKE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UPLOAD_IMAGES_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchUploadImages),\n    fork(watchAddPost),\n    fork(watchLoadPost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}