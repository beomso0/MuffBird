{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  // 게시 완료되면 true\n  addPostDone: false,\n  addPostError: null,\n  loadPostLoading: false,\n  // 게시 완료되면 true\n  loadPostDone: false,\n  loadPostError: null,\n  loadOnePostLoading: false,\n  // 게시 완료되면 true\n  loadOnePostDone: false,\n  loadOnePostError: null,\n  removePostLoading: false,\n  // 게시 완료되면 true\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  // 게시 완료되면 true\n  addCommentDone: false,\n  addCommentError: null,\n  likePostLoading: false,\n  // 게시 완료되면 true\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  // 게시 완료되면 true\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  // 게시 완료되면 true\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  // 게시 완료되면 true\n  retweetDone: false,\n  retweetError: null\n}; // export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//   id: shortId.generate(),\n//   User: {\n//     id: shortId.generate(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraphs(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: shortId.generate(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.paragraph(),\n//   }],\n// }));\n\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var LOAD_ONE_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_ONE_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_ONE_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    // 이렇게 빼주면 reducer에서 재활용 가능\n    data: data // 작성한 글에 해당\n\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    // 이렇게 빼주면 reducer에서 재활용 가능\n    data: data // 작성한 글에 해당\n\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    // 이게 immer의 기본꼴임. immer가 알아서 불변성을 지켜줌. state는 건드리면 안됨.\n    switch (action.type) {\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          // action data PostId, UserId 들어있음.\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true; // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\n\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePost = action.data.length === 10; // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\n\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case LOAD_ONE_POST_REQUEST:\n        draft.loadOnePostLoading = true;\n        draft.loadOnePostDone = false;\n        draft.loadOnePostError = null;\n        break;\n\n      case LOAD_ONE_POST_SUCCESS:\n        draft.loadOnePostLoading = false;\n        draft.loadOnePostDone = true;\n        draft.singlePost = action.data; // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\n\n        break;\n\n      case LOAD_ONE_POST_FAILURE:\n        draft.loadOnePostLoading = false;\n        draft.loadOnePostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data); // 앞에다 추가를 해야 위에 올라감.\n\n        draft.imagePaths = []; // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        }); // 앞에다 추가를 해야 위에 올라감.\n\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const mainPosts = [...state.mainPosts]; // 불변성을 유지하느라 코드가 이렇게 길어짐 ㅠㅠ\n      // mainPosts[postIndex] = post; // 이걸 편하게 할 수 있는 라이브러리가 '이머'\n      // return {\n      //   ...state,\n      //   mainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","loadPostLoading","loadPostDone","loadPostError","loadOnePostLoading","loadOnePostDone","loadOnePostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_ONE_POST_REQUEST","LOAD_ONE_POST_SUCCESS","LOAD_ONE_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","filter","v","i","unshift","error","post","find","id","PostId","Likers","push","UserId","concat","length","singlePost","Comments"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  addPostLoading: false, // 게시 완료되면 true\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  loadPostLoading: false, // 게시 완료되면 true\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  loadOnePostLoading: false, // 게시 완료되면 true\r\n  loadOnePostDone: false,\r\n  loadOnePostError: null,\r\n  removePostLoading: false, // 게시 완료되면 true\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false, // 게시 완료되면 true\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  likePostLoading: false, // 게시 완료되면 true\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false, // 게시 완료되면 true\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  uploadImagesLoading: false, // 게시 완료되면 true\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false, // 게시 완료되면 true\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n//   id: shortId.generate(),\r\n//   User: {\r\n//     id: shortId.generate(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraphs(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: shortId.generate(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.paragraph(),\r\n//   }],\r\n// }));\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const LOAD_ONE_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_ONE_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_ONE_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST, // 이렇게 빼주면 reducer에서 재활용 가능\r\n  data, // 작성한 글에 해당\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST, // 이렇게 빼주면 reducer에서 재활용 가능\r\n  data, // 작성한 글에 해당\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => { // 이게 immer의 기본꼴임. immer가 알아서 불변성을 지켜줌. state는 건드리면 안됨.\r\n    switch (action.type) {\r\n      case REMOVE_IMAGE:\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n        break;\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading = true;\r\n        draft.retweetDone = false;\r\n        draft.retweetError = null;\r\n        break;\r\n      case RETWEET_SUCCESS: {\r\n        draft.retweetLoading = false;\r\n        draft.retweetDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      }\r\n      case RETWEET_FAILURE:\r\n        draft.retweetLoading = false;\r\n        draft.retweetError = action.error;\r\n        break;\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesDone = false;\r\n        draft.uploadImagesError = null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS: {\r\n        draft.imagePaths = action.data;\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        break;\r\n      }\r\n      case UPLOAD_IMAGES_FAILURE:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break;\r\n      case LIKE_POST_SUCCESS: {\r\n        // action data PostId, UserId 들어있음.\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break;\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        draft.mainPosts = draft.mainPosts.concat(action.data);\r\n        draft.hasMorePost = action.data.length === 10;\r\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n      case LOAD_ONE_POST_REQUEST:\r\n        draft.loadOnePostLoading = true;\r\n        draft.loadOnePostDone = false;\r\n        draft.loadOnePostError = null;\r\n        break;\r\n      case LOAD_ONE_POST_SUCCESS:\r\n        draft.loadOnePostLoading = false;\r\n        draft.loadOnePostDone = true;\r\n        draft.singlePost = action.data;\r\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\r\n        break;\r\n      case LOAD_ONE_POST_FAILURE:\r\n        draft.loadOnePostLoading = false;\r\n        draft.loadOnePostError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(action.data); // 앞에다 추가를 해야 위에 올라감.\r\n        draft.imagePaths = [];\r\n        // unshift: 배열의 맨 앞에 요소 추가하고, 그 길이를 return하는 함수\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId); // 앞에다 추가를 해야 위에 올라감.\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      }\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts]; // 불변성을 유지하느라 코드가 이렇게 길어짐 ㅠㅠ\r\n      // mainPosts[postIndex] = post; // 이걸 편하게 할 수 있는 라이브러리가 '이머'\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}