{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas'; //reducer 만들어 준거랑 비슷하게 rootSaga도 만들어줌.\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  retrun(next(action));\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false // 이 조건문이 true면 ? 값으로 변수 지정, false면 : 값으로 지정.\n  ? compose(applyMiddleware(...middlewares)) //배포용일 때는 devtool에 연결 x\n  : compose(composeWithDevTools(...middlewares)); //개발모드에서는 devtool에 연결.\n\n  const store = createStore(reducer, enhancer); // store는 state랑 reducer를 포함\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper; // ==> 이제 _app.js 가서 Nodebirde를 wrapper로 감싸줌","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","retrun","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAAiC;;AAEjC,MAAMC,gBAAgB,GAAI,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACxEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAG,EAAAA,MAAM,CAAEJ,IAAI,CAACC,MAAD,CAAN,CAAN;AACH,CAHD;;AAKA,MAAMI,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGZ,oBAAoB,EAA3C;AACA,QAAMa,WAAW,GAAG,CAACD,cAAD,EAAiBT,gBAAjB,CAApB;AACA,QAAMW,QAAQ,GAAG,MAAsC;AAAtC,IACXhB,OAAO,CAACD,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CADI,CAC8B;AAD9B,IAEXf,OAAO,CAACC,mBAAmB,CAAC,GAAGc,WAAJ,CAApB,CAFb,CAHyB,CAK0B;;AACnD,QAAME,KAAK,GAAGnB,WAAW,CAACK,OAAD,EAAUa,QAAV,CAAzB,CANyB,CAMqB;;AAC9CC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBf,QAAnB,CAAjB;AACA,SAAOa,KAAP;AACH,CATD;;AAWA,MAAMG,OAAO,GAAGvB,aAAa,CAACgB,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf,C,CAAwB","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas'; //reducer 만들어 준거랑 비슷하게 rootSaga도 만들어줌.\r\n\r\nconst loggerMiddleware = (({ dispatch, getState }) => (next) => (action) => {\r\n    console.log(action);\r\n    retrun (next(action));\r\n});\r\n\r\nconst configureStore = () => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware, loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production' // 이 조건문이 true면 ? 값으로 변수 지정, false면 : 값으로 지정.\r\n        ? compose(applyMiddleware(...middlewares)) //배포용일 때는 devtool에 연결 x\r\n        : compose(composeWithDevTools(...middlewares)) //개발모드에서는 devtool에 연결.\r\n    const store = createStore(reducer, enhancer); // store는 state랑 reducer를 포함\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development'}); \r\n\r\nexport default wrapper; // ==> 이제 _app.js 가서 Nodebirde를 wrapper로 감싸줌\r\n\r\n"]},"metadata":{},"sourceType":"module"}