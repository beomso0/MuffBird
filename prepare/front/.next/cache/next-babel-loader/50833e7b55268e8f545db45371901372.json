{"ast":null,"code":"// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\nimport { all, fork, call, take, put, takeEvery, takeLatest, throttle, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n} //call은 동기 함수라서 결과 올떄까지 기다림 <-> fork는 비동기 함수 요청이라서, 결과 기다리지 않고 바로 다음줄 실행.\n// yield는 await이랑 비슷한 역할이라고 생각해도 됨.\n\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut); //takeLeading은 첫번째꺼\n}\n\nfunction* watchAddPost() {\n  yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), //fork는 함수를 실행하는 것. \n  fork(watchLogOut), //근데 call이랑은 다름. then, how different?\n  fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/index.js"],"names":["all","fork","call","take","put","takeEvery","takeLatest","throttle","delay","axios","logInAPI","data","post","logIn","action","type","result","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,SAArC,EAAgDC,UAAhD,EAA4DC,QAA5D,EAAsEC,KAAtE,QAAmF,oBAAnF;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAG;AACC;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMJ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,GAAP,EAAY;AACV,UAAMb,GAAG,CAAC;AAAE;AACRW,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASQ,SAAT,GAAqB;AACjB,SAAOV,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUQ,MAAV,GAAmB;AACf,MAAG;AACC;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMJ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,iBADA;AAENJ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,GAAP,EAAY;AACV,UAAMb,GAAG,CAAC;AAAE;AACRW,MAAAA,IAAI,EAAE,iBADA;AAENJ,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASU,UAAT,CAAoBV,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUW,OAAV,CAAkBR,MAAlB,EAA0B;AACtB,MAAG;AACC;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMJ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAE,kBADA;AAENJ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,GAAP,EAAY;AACV,UAAMb,GAAG,CAAC;AAAE;AACRW,MAAAA,IAAI,EAAE,kBADA;AAENJ,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAED;AACA;;;AAEA,UAAUY,UAAV,GAAuB;AACnB,QAAMjB,UAAU,CAAC,gBAAD,EAAmBO,KAAnB,CAAhB,CADmB,CACwB;AAC9C,C,CAAC;;;AAEF,UAAUW,WAAV,GAAwB;AACpB,QAAMlB,UAAU,CAAC,iBAAD,EAAoBc,MAApB,CAAhB,CADoB,CACyB;AAChD;;AAED,UAAUK,YAAV,GAAyB;AACrB,QAAMnB,UAAU,CAAC,kBAAD,EAAqBgB,OAArB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAM1B,GAAG,CAAC,CACNC,IAAI,CAACsB,UAAD,CADE,EACY;AAClBtB,EAAAA,IAAI,CAACuB,WAAD,CAFE,EAEa;AACnBvB,EAAAA,IAAI,CAACwB,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["// *가 붙은 genrator 함수는 yield; 까지 실행하고, 그 다음에 .next() 해주면 그 다음 yield까지를 실행함.\n// 중단점이 있는 함수! 원래 js 는 중단점이 없는데, gen 함수는 있음\n// 이 성질을 활용한 것이 saga임.\n// eventListener처럼 활용 가능\n\nimport { all, fork, call, take, put, takeEvery, takeLatest, throttle, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI(data) {\n    return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n    try{\n        // const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data,\n        });\n    }    \n}\n\nfunction logOutAPI() {\n    return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n    try{\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data,\n        });\n    }    \n}\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try{\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({ // put은 dispatch와 거의 같음.\n            type: 'ADD_POST_FAILURE',\n            data: err.response.data,\n        });\n    }    \n}\n\n//call은 동기 함수라서 결과 올떄까지 기다림 <-> fork는 비동기 함수 요청이라서, 결과 기다리지 않고 바로 다음줄 실행.\n// yield는 await이랑 비슷한 역할이라고 생각해도 됨.\n\nfunction* watchLogIn() {\n    yield takeLatest('LOG_IN_REQUEST', logIn); //LOG_IN이 들어오면 logIn을 실행하는 일종의 이벤트리스너?\n} //take의 치명적 단점은 한 번 밖에 listend을 안한다는 것. --> 그래서 while true로 감쌈. or takeEvery 사용\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut); //takeLeading은 첫번째꺼\n}\n\nfunction* watchAddPost() {\n    yield takeLatest('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogIn), //fork는 함수를 실행하는 것. \n        fork(watchLogOut), //근데 call이랑은 다름. then, how different?\n        fork(watchAddPost),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}