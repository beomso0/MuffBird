{"ast":null,"code":"import { all, fork, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_ONE_POST_REQUEST, LOAD_ONE_POST_SUCCESS, LOAD_ONE_POST_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadOnePostAPI(data) {\n  return axios.get(`/post/${data}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadOnePost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadOnePostAPI, action.data);\n    yield put({\n      type: LOAD_ONE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_ONE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.lastId);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE // data: err.response,\n\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    console.log('loading hashtag');\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); // POST/post\n}\n\nfunction* addPost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); // DELETE에는 데이터 넣을 수 없음.\n}\n\nfunction* removePost(action) {\n  // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); // 여기서 data는 post.id\n  // patch는 table(여기서는 post)의 일부분 수정할 때 사용함.\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: LIKE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: UNLIKE_POST_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data); // action.data: imageFormData\n\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: UPLOAD_IMAGES_FAILURE // data: err.response.data,\n\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data); // action.data: imageFormData\n\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data // data: result.data,\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      // put은 dispatch와 거의 같음.\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadOnePost() {\n  yield takeLatest(LOAD_ONE_POST_REQUEST, loadOnePost);\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadOnePost), fork(watchRemovePost), fork(watchAddComment), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["/Users/beomso0/Desktop/godev/birdSns/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","put","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_ONE_POST_REQUEST","LOAD_ONE_POST_SUCCESS","LOAD_ONE_POST_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadOnePostAPI","data","get","loadOnePost","action","result","type","err","response","loadPostAPI","lastId","loadPost","loadHashtagPostsAPI","loadHashtagPosts","console","log","loadUserPostsAPI","loadUserPosts","addPostAPI","post","addPost","id","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","error","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","uploadImagesAPI","uploadImages","retweetAPI","retweet","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","watchLoadOnePost","watchLoadUserPosts","watchLoadHashtagPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\n  LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE,\n  UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE,\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\n  RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE,\n  LOAD_ONE_POST_REQUEST, LOAD_ONE_POST_SUCCESS, LOAD_ONE_POST_FAILURE,\n  LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadOnePostAPI(data) {\n  return axios.get(`/post/${data}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadOnePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadOnePostAPI, action.data);\n    yield put({\n      type: LOAD_ONE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_ONE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadPostAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 undefined인 경우에는 0으로\n  // get 에서 데이터 선택해서 불러올 때는 ? 이후에 / key = value / 형태로 query string을 만들어 보냄.\n  // --> 주소를 캐싱하면 데이터까지 캐싱할 수 있어서 좋음. --> get만의 이점.\n}\n\nfunction* loadPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadPostAPI, action.lastId);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_POST_FAILURE,\n      // data: err.response,\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    console.log('loading hashtag');\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LOAD_USER_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); // POST/post\n}\n\nfunction* addPost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); // DELETE에는 데이터 넣을 수 없음.\n}\n\nfunction* removePost(action) { // saga는 여러개의 액션을 실행할 수 있음.\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({ // put은 dispatch와 거의 같음.\n      type: REMOVE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); // Post / 1 / comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: ADD_COMMENT_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`); // 여기서 data는 post.id\n  // patch는 table(여기서는 post)의 일부분 수정할 때 사용함.\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: LIKE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UNLIKE_POST_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data); // action.data: imageFormData\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: UPLOAD_IMAGES_FAILURE,\n      // data: err.response.data,\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data); // action.data: imageFormData\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data,\n      // data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({ // put은 dispatch와 거의 같음.\n      type: RETWEET_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadOnePost() {\n  yield takeLatest(LOAD_ONE_POST_REQUEST, loadOnePost);\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchRetweet),\n    fork(watchUploadImages),\n    fork(watchAddPost),\n    fork(watchLoadPost),\n    fork(watchLoadUserPosts),\n    fork(watchLoadHashtagPosts),\n    fork(watchLoadOnePost),\n    fork(watchRemovePost),\n    fork(watchAddComment),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}